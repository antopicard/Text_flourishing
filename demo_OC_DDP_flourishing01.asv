function demo_OC_DDP_flourishing01
% Viapoint task for a point-mass system for text flourishing
%
% Copyright (c) 2024 Idiap Research Institute, https://idiap.ch/
% Written by Sylvain Calinon, https://calinon.ch/
% 
% This file is part of PbDlib, http://www.idiap.ch/software/pbdlib/
% 
% PbDlib is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License version 3 as
% published by the Free Software Foundation.
% 
% PbDlib is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with PbDlib. If not, see <http://www.gnu.org/licenses/>.


%% Parameters
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
param.dt = 1E-2; %Time step size
param.nbData = 50; %Number of datapoints
param.nbPoints = 3; %Number of viapoints
param.nbMinIter = 5; %Minimum number of iterations for iLQR
param.nbMaxIter = 20; %Maximum number of iterations for iLQR
param.nbVarPos = 2; %Dimension of position data
param.nbDeriv = 3; %Number of static and dynamic features (nbDeriv=2 for [x,dx] and u=ddx)
param.nbVarX = param.nbVarPos * param.nbDeriv; %State space dimension
param.q = 1E0; %Tracking weight 
param.qc = 1E-9; %Curvature weight 
param.qd = 1E-3; %Gaussian motion guide weight 
param.r = 1E-12; %Control weight 

%Gaussian ellipse as motion guide
param.MuGauss = [1.3; 1.1];
vtmp = [.15; .15]; %Main axis of covariance matrix
param.SigmaGauss = vtmp * vtmp' + eye(2) * 2E-2; %Covariance matrix

idp = [0:param.nbPoints-1]*param.nbVarX + [1:param.nbVarPos]';
idv = [0:param.nbPoints-1]*param.nbVarX + [param.nbVarPos+1:2*param.nbVarPos]';

%Viapoints
param.Mu = zeros(param.nbVarX*param.nbPoints,1); 
%param.Mu(idp(:)) = rand(param.nbVarPos*param.nbPoints,1); 
param.Mu(idp(:)) = [[1; 1]; [1.4; 1.6]; [0.8; 2]];

%Control weight matrix (at trajectory level)
R = speye((param.nbData-1) * param.nbVarPos) * param.r; 

%Time occurrence of viapoints
tl = linspace(1, param.nbData, param.nbPoints+1);
tl = round(tl(2:end));
idx = (tl - 1) * param.nbVarX + [1:param.nbVarX]';
idd = ([tl(1):tl(2)] - 1) * param.nbVarX + [1:param.nbVarPos]'; 

%Dynamical System settings (discrete version)
A1d = zeros(param.nbDeriv);
for i=0:param.nbDeriv-1
	A1d = A1d + diag(ones(param.nbDeriv-i,1),i) * param.dt^i * 1/factorial(i); %Discrete 1D
end
B1d = zeros(param.nbDeriv,1); 
for i=1:param.nbDeriv
	B1d(param.nbDeriv-i+1) = param.dt^i * 1/factorial(i); %Discrete 1D
end
A = repmat(kron(A1d, eye(param.nbVarPos)), [1 1 param.nbData-1]); %Discrete nD
B = repmat(kron(B1d, eye(param.nbVarPos)), [1 1 param.nbData-1]); %Discrete nD

[Su0, Sx0] = transferMatrices(A, B); %Constant Su and Sx for the proposed system
Su = Su0(idx,:);
Sud = Su0(idd,:);


%% Constraining the position of two consecutive keypoints to be same and crossing at given angle -> forming a loop
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%param.Q = eye(param.nbPoints*param.nbVarX) * param.q;

%Only cares about position part of the state variable
param.Q = diag(kron(ones(param.nbPoints,1), [ones(param.nbVarPos,1); zeros(param.nbVarX-param.nbVarPos,1)])) * param.q; 

param.Mu(idp(:,2)) = param.Mu(idp(:,1)); %Viapoints 1 and 2 form a loop

%Impose cost on crossing angle
a = pi/2; %desired crossing angle
V = [cos(a) -sin(a); sin(a) cos(a)]; %rotation matrix
param.Q(idv(:,1), idv(:,1)) = eye(param.nbVarPos)*1E0;
param.Q(idv(:,2), idv(:,2)) = eye(param.nbVarPos)*1E0;
param.Q(idv(:,1), idv(:,2)) = V; %-eye(nbVarPos)*1E0;
param.Q(idv(:,2), idv(:,1)) = V'; %-eye(nbVarPos)*1E0;


%% iLQR for text flourishing
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
x0 = zeros(param.nbVarX,1); %Initial state
u = zeros(param.nbVarPos*(param.nbData-1), 1); %Initial commands

for n=1:param.nbMaxIter
	x = reshape(Su0 * u + Sx0 * x0, param.nbVarX, param.nbData); %System evolution
	[f, J] = f_reach(x(:,tl), param); %Residuals and Jacobians (viapoint tracking objective)
	[fc, Jc] = f_curvature(x, param); %Residuals and Jacobians (curvature objective)
	[fd, Jd] = f_dist(x(:,tl(1):tl(2)), param); %Residuals and Jacobians (Gaussian motion guide objective)
	du = (Su' * J' * param.Q * J * Su + Su0' * Jc' * Jc * Su0 * param.qc + Sud' * Jd' * Jd * Sud * param.qd + R) \ ...
	    (-Su' * J' * param.Q * f - Su0' * Jc' * fc(:) * param.qc - Sud' * Jd' * fd(:) * param.qd - u * param.r); %Update
	
	%Estimate step size with backtracking line search method
	alpha = 1;
	cost0 = costFct(f, fc, fd, u, param); %Cost
	while 1
		utmp = u + du * alpha;
		xtmp = reshape(Su0 * utmp + Sx0 * x0, param.nbVarX, param.nbData);
		ftmp = f_reach(xtmp(:,tl), param); %Residuals (viapoint tracking objective)
		fctmp = f_curvature(xtmp, param); %Residuals (curvature objective)
		fdtmp = f_dist(xtmp(:,tl(1):tl(2)), param); %Residuals (Gaussian motion guide objective)
		cost = costFct(ftmp, fctmp, fdtmp, utmp, param); %Cost
		if cost < cost0 || alpha < 1E-3
			break;
		end
		alpha = alpha * 0.5;
	end
	u = u + du * alpha;
		
	if norm(du * alpha) < 5E-2 && n>param.nbMinIter
		break; %Stop iLQR when solution is reached
	end
end
disp(['iLQR converged in ' num2str(n) ' iterations.']);
%norm(fd(:))^2


%% Plot state space
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
h = figure('position',[10,10,600,600],'color',[1,1,1]); hold on; axis off;
al = linspace(-pi, pi, 50);
[V,D] = eig(param.SigmaGauss);
msh = V * D.^.5 * [cos(al); sin(al)] + repmat(param.MuGauss(1:2), 1, 50);
patch(msh(1,:), msh(2,:), [1 .8 .8],'linewidth',2,'edgecolor',[.8 .4 .4]);

plot(x(1,:), x(2,:), '-','linewidth',4,'color',[0 0 0]);
plot(x(1,1), x(2,1), '.','markersize',30,'color',[0 0 0]);
plot(param.Mu(idp(1,:)), param.Mu(idp(2,:)), '.','markersize',30,'color',[.8 0 0]);
axis equal; 
%print('-dpng','graphs/iLQR_flourishing01.png');

waitfor(h);
close all;
end 

%%%%%%%%%%%%%%%%%%%%%%
function [Su, Sx] = transferMatrices(A, B)
	[nbVarX, nbVarU, nbData] = size(B);
	nbData = nbData+1;
	Sx = kron(ones(nbData,1), speye(nbVarX)); 
	Su = sparse(zeros(nbVarX*(nbData-1), nbVarU*(nbData-1)));
	for t=1:nbData-1
		id1 = (t-1)*nbVarX+1:t*nbVarX;
		id2 = t*nbVarX+1:(t+1)*nbVarX;
		id3 = (t-1)*nbVarU+1:t*nbVarU;
		Sx(id2,:) = squeeze(A(:,:,t)) * Sx(id1,:);
		Su(id2,:) = squeeze(A(:,:,t)) * Su(id1,:);	
		Su(id2,id3) = B(:,:,t);	
	end
end

%%%%%%%%%%%%%%%%%%%%%%
%Cost function
function c = costFct(f, fc, fd, u, param)
	%c = norm(f(:))^2 * param.q + norm(fc(:))^2 * param.qc + norm(u)^2 * param.r;
	c = f(:)' * param.Q * f(:) + norm(fc(:))^2 * param.qc + norm(fd(:))^2 * param.qd + norm(u)^2 * param.r;
end

%%%%%%%%%%%%%%%%%%%%%%
%Residuals f and Jacobians J for a viapoints reaching task with point mass system
function [f, J] = f_reach(x, param)
	f = x(:) - param.Mu; %Residuals
	J = eye(param.nbVarX * size(x,2)); %Jacobian
end

%%%%%%%%%%%%%%%%%%%%%%
%Residuals f and Jacobians J for staying on the contour of an ellipse
function [f, J] = f_dist(x, param)
	e = x(1:param.nbVarPos,:) - repmat(param.MuGauss, [1, size(x,2)]);
%	f = 1 - sum(e.^2, 1)' / param.dist^2; %Residuals
%	Jtmp = repmat(-e'/param.dist^2, 1, param.nbData);
	f = 1 - sum(e .* (param.SigmaGauss\e), 1)';
	Jtmp = repmat(-param.SigmaGauss\e, [size(x,2), 1])'; 
	
	J = Jtmp .* kron(eye(size(x,2)), ones(1,param.nbVarPos)); %Jacobians
end

%%%%%%%%%%%%%%%%%%%%%%
%Residuals f and Jacobians J for curvature minimization over path
function [f, J] = f_curvature(x, param)
%	dx = x(:,2:end) - x(:,1:end-1);
%	l = sum(dx.^2,1).^.5; %Segment lengths
%	dx0 = dx ./ l; %Unit direction vectors
%	theta = acos(dx0(:,2:end)' * dx0(:,1:end-1)); %Angles

	ddx = x(2*param.nbVarPos+1:3*param.nbVarPos,:); %Second derivative
	dx = x(param.nbVarPos+1:2*param.nbVarPos,:); %First derivative
	dxn = sum(dx.^2,1).^(3/2);
	f = (dx(1,:) .* ddx(2,:) - dx(2,:) .* ddx(1,:)) ./ (dxn + 1E-8); %Curvature
	
	s11 = zeros(param.nbVarX,1); s11(3) = 1; %Selection vector
	s12 = zeros(param.nbVarX,1); s12(4) = 1; %Selection vector
	s21 = zeros(param.nbVarX,1); s21(5) = 1; %Selection vector
	s22 = zeros(param.nbVarX,1); s22(6) = 1; %Selection vector
	Sa = s11 * s22' - s12 * s21'; %Selection matrix for numerator
	Sb = s11 * s11' + s12 * s12'; %Selection matrix for denominator
	J = [];
	for t=1:param.nbData
		a = x(:,t)' * Sa * x(:,t);
		b = x(:,t)' * Sb * x(:,t) + 1E-8; 
		Jtmp = 2 * b^(-3/2) * Sa * x(:,t) - 3 * a * b^(-5/2) * Sb * x(:,t);
		J = blkdiag(J, Jtmp');
	end
end
